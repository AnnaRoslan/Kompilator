//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\annar\Desktop\Kompilator\Kom\Gramatyka.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class GramatykaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, TYPE=9, 
		LP=10, RP=11, ADD=12, SUB=13, MUL=14, DIV=15, WHILE=16, IF=17, FUNCTION=18, 
		READREAL=19, READINT=20, PRINT=21, STRING=22, ID=23, INT=24, REAL=25, 
		NEWLINE=26, WHITESPACE=27, COMMENT=28;
	public const int
		RULE_prog = 0, RULE_block = 1, RULE_statement = 2, RULE_value = 3, RULE_vect = 4, 
		RULE_numbers = 5, RULE_number = 6, RULE_arithmeticExpr = 7, RULE_expr = 8, 
		RULE_element = 9, RULE_function = 10, RULE_equal = 11, RULE_blockIf = 12, 
		RULE_condition = 13;
	public static readonly string[] ruleNames = {
		"prog", "block", "statement", "value", "vect", "numbers", "number", "arithmeticExpr", 
		"expr", "element", "function", "equal", "blockIf", "condition"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'['", "']'", "'()'", "'{'", "'}'", "','", "'=='", null, 
		"'('", "')'", "'+'", "'-'", "'*'", "'/'", "'while'", "'if'", "'func'", 
		"'ReadReal'", "'ReadInt'", "'Print'", null, null, null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "TYPE", "LP", "RP", 
		"ADD", "SUB", "MUL", "DIV", "WHILE", "IF", "FUNCTION", "READREAL", "READINT", 
		"PRINT", "STRING", "ID", "INT", "REAL", "NEWLINE", "WHITESPACE", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gramatyka.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GramatykaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GramatykaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GramatykaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(GramatykaParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(GramatykaParser.NEWLINE, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHILE) | (1L << IF) | (1L << FUNCTION) | (1L << READREAL) | (1L << READINT) | (1L << PRINT) | (1L << ID) | (1L << NEWLINE))) != 0)) {
				{
				{
				State = 30;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WHILE:
				case IF:
				case READREAL:
				case READINT:
				case PRINT:
				case ID:
					{
					State = 28; statement();
					}
					break;
				case FUNCTION:
					{
					State = 29; function();
					}
					break;
				case NEWLINE:
					break;
				default:
					break;
				}
				{
				State = 32; Match(NEWLINE);
				}
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(GramatykaParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(GramatykaParser.NEWLINE, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHILE) | (1L << IF) | (1L << READREAL) | (1L << READINT) | (1L << PRINT) | (1L << ID) | (1L << NEWLINE))) != 0)) {
				{
				{
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHILE) | (1L << IF) | (1L << READREAL) | (1L << READINT) | (1L << PRINT) | (1L << ID))) != 0)) {
					{
					State = 38; statement();
					}
				}

				State = 41; Match(NEWLINE);
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallContext : StatementContext {
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public CallContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintContext : StatementContext {
		public ITerminalNode PRINT() { return GetToken(GramatykaParser.PRINT, 0); }
		public ITerminalNode LP() { return GetToken(GramatykaParser.LP, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GramatykaParser.RP, 0); }
		public PrintContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VectDeclarationContext : StatementContext {
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(GramatykaParser.TYPE, 0); }
		public ITerminalNode INT() { return GetToken(GramatykaParser.INT, 0); }
		public VectDeclarationContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterVectDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitVectDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAssignContext : StatementContext {
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public ArithmeticExprContext arithmeticExpr() {
			return GetRuleContext<ArithmeticExprContext>(0);
		}
		public ExprAssignContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterExprAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitExprAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VectAssignContext : StatementContext {
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public ITerminalNode INT() { return GetToken(GramatykaParser.INT, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public VectAssignContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterVectAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitVectAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VectAllAssignContext : StatementContext {
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public NumbersContext numbers() {
			return GetRuleContext<NumbersContext>(0);
		}
		public VectAllAssignContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterVectAllAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitVectAllAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectAllAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VectExprAssignContext : StatementContext {
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public ITerminalNode INT() { return GetToken(GramatykaParser.INT, 0); }
		public ArithmeticExprContext arithmeticExpr() {
			return GetRuleContext<ArithmeticExprContext>(0);
		}
		public VectExprAssignContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterVectExprAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitVectExprAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectExprAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadIntContext : StatementContext {
		public ITerminalNode READINT() { return GetToken(GramatykaParser.READINT, 0); }
		public ITerminalNode LP() { return GetToken(GramatykaParser.LP, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GramatykaParser.RP, 0); }
		public ReadIntContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterReadInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitReadInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : StatementContext {
		public ITerminalNode WHILE() { return GetToken(GramatykaParser.WHILE, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadRealContext : StatementContext {
		public ITerminalNode READREAL() { return GetToken(GramatykaParser.READREAL, 0); }
		public ITerminalNode LP() { return GetToken(GramatykaParser.LP, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GramatykaParser.RP, 0); }
		public ReadRealContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterReadReal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitReadReal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadReal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : StatementContext {
		public ITerminalNode IF() { return GetToken(GramatykaParser.IF, 0); }
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public BlockIfContext blockIf() {
			return GetRuleContext<BlockIfContext>(0);
		}
		public IfContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : StatementContext {
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AssignContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new PrintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; Match(PRINT);
				State = 48; Match(LP);
				State = 49; value();
				State = 50; Match(RP);
				}
				break;
			case 2:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; Match(ID);
				State = 53; Match(T__0);
				State = 54; value();
				}
				break;
			case 3:
				_localctx = new ExprAssignContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 55; Match(ID);
				State = 56; Match(T__0);
				State = 57; arithmeticExpr();
				}
				break;
			case 4:
				_localctx = new VectDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 58; Match(ID);
				State = 59; Match(T__1);
				State = 60; Match(TYPE);
				State = 61; Match(INT);
				State = 62; Match(T__2);
				}
				break;
			case 5:
				_localctx = new VectAssignContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 63; Match(ID);
				State = 64; Match(T__1);
				State = 65; Match(INT);
				State = 66; Match(T__2);
				State = 67; Match(T__0);
				State = 68; value();
				}
				break;
			case 6:
				_localctx = new VectExprAssignContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 69; Match(ID);
				State = 70; Match(T__1);
				State = 71; Match(INT);
				State = 72; Match(T__2);
				State = 73; Match(T__0);
				State = 74; arithmeticExpr();
				}
				break;
			case 7:
				_localctx = new VectAllAssignContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 75; Match(ID);
				State = 76; Match(T__0);
				State = 77; Match(T__1);
				State = 78; numbers();
				State = 79; Match(T__2);
				}
				break;
			case 8:
				_localctx = new ReadIntContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 81; Match(READINT);
				State = 82; Match(LP);
				State = 83; value();
				State = 84; Match(RP);
				}
				break;
			case 9:
				_localctx = new ReadRealContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 86; Match(READREAL);
				State = 87; Match(LP);
				State = 88; value();
				State = 89; Match(RP);
				}
				break;
			case 10:
				_localctx = new CallContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 91; Match(ID);
				State = 92; Match(T__3);
				}
				break;
			case 11:
				_localctx = new IfContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 93; Match(IF);
				State = 94; equal();
				State = 95; Match(T__4);
				State = 96; blockIf();
				State = 97; Match(T__5);
				}
				break;
			case 12:
				_localctx = new WhileContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 99; Match(WHILE);
				State = 100; condition();
				State = 101; Match(T__4);
				State = 102; block();
				State = 103; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public ITerminalNode STRING() { return GetToken(GramatykaParser.STRING, 0); }
		public ITerminalNode INT() { return GetToken(GramatykaParser.INT, 0); }
		public ITerminalNode REAL() { return GetToken(GramatykaParser.REAL, 0); }
		public VectContext vect() {
			return GetRuleContext<VectContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_value);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; Match(STRING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109; Match(INT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 110; Match(REAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 111; vect();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public ITerminalNode INT() { return GetToken(GramatykaParser.INT, 0); }
		public VectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterVect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitVect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectContext vect() {
		VectContext _localctx = new VectContext(Context, State);
		EnterRule(_localctx, 8, RULE_vect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(ID);
			State = 115; Match(T__1);
			State = 116; Match(INT);
			State = 117; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumbersContext : ParserRuleContext {
		public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public NumbersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numbers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterNumbers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitNumbers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumbers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumbersContext numbers() {
		NumbersContext _localctx = new NumbersContext(Context, State);
		EnterRule(_localctx, 10, RULE_numbers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; number();
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 120; Match(T__6);
				State = 121; number();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(GramatykaParser.INT, 0); }
		public ITerminalNode REAL() { return GetToken(GramatykaParser.REAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==REAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExprContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(GramatykaParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(GramatykaParser.ADD, i);
		}
		public ITerminalNode[] SUB() { return GetTokens(GramatykaParser.SUB); }
		public ITerminalNode SUB(int i) {
			return GetToken(GramatykaParser.SUB, i);
		}
		public ArithmeticExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterArithmeticExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitArithmeticExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExprContext arithmeticExpr() {
		ArithmeticExprContext _localctx = new ArithmeticExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_arithmeticExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; expr();
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADD || _la==SUB) {
				{
				{
				State = 130;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 131; expr();
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public ITerminalNode[] MUL() { return GetTokens(GramatykaParser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(GramatykaParser.MUL, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(GramatykaParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(GramatykaParser.DIV, i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; element();
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MUL || _la==DIV) {
				{
				{
				State = 138;
				_la = TokenStream.LA(1);
				if ( !(_la==MUL || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 139; element();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GramatykaParser.LP, 0); }
		public ArithmeticExprContext arithmeticExpr() {
			return GetRuleContext<ArithmeticExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GramatykaParser.RP, 0); }
		public ITerminalNode INT() { return GetToken(GramatykaParser.INT, 0); }
		public ITerminalNode REAL() { return GetToken(GramatykaParser.REAL, 0); }
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 18, RULE_element);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; Match(LP);
				State = 146; arithmeticExpr();
				State = 147; Match(RP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; Match(INT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150; Match(REAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 151; Match(ID);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 152; Match(ID);
				State = 153; Match(T__1);
				State = 154; Match(INT);
				State = 155; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(GramatykaParser.FUNCTION, 0); }
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 20, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(FUNCTION);
			State = 159; Match(ID);
			State = 160; Match(T__3);
			State = 161; Match(T__4);
			State = 162; block();
			State = 163; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public ITerminalNode INT() { return GetToken(GramatykaParser.INT, 0); }
		public EqualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualContext equal() {
		EqualContext _localctx = new EqualContext(Context, State);
		EnterRule(_localctx, 22, RULE_equal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(ID);
			State = 166; Match(T__7);
			State = 167; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockIfContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterBlockIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitBlockIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockIfContext blockIf() {
		BlockIfContext _localctx = new BlockIfContext(Context, State);
		EnterRule(_localctx, 24, RULE_blockIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramatykaParser.ID, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramatykaListener typedListener = listener as IGramatykaListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramatykaVisitor<TResult> typedVisitor = visitor as IGramatykaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 26, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\xB0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'!', '\n', '\x2', '\x3', '\x2', '\a', '\x2', '$', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\'', '\v', '\x2', '\x3', '\x3', '\x5', '\x3', '*', '\n', 
		'\x3', '\x3', '\x3', '\a', '\x3', '-', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x30', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'l', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 's', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '}', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\x80', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\a', '\t', '\x87', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'\x8A', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'\x8F', '\n', '\n', '\f', '\n', '\xE', '\n', '\x92', '\v', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\x9F', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x2', '\x2', '\x10', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x2', '\x5', '\x3', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\xE', '\xF', 
		'\x3', '\x2', '\x10', '\x11', '\x2', '\xBC', '\x2', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '.', '\x3', '\x2', '\x2', '\x2', '\x6', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'r', '\x3', '\x2', '\x2', '\x2', '\n', 't', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'y', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x10', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x14', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x1E', '!', '\x5', 
		'\x6', '\x4', '\x2', '\x1F', '!', '\x5', '\x16', '\f', '\x2', ' ', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x1F', '\x3', '\x2', '\x2', '\x2', ' ', 
		'!', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', 
		'\"', '$', '\a', '\x1C', '\x2', '\x2', '#', ' ', '\x3', '\x2', '\x2', 
		'\x2', '$', '\'', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', 
		'\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '(', '*', 
		'\x5', '\x6', '\x4', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', ')', 
		'*', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', '-', '\a', '\x1C', '\x2', '\x2', ',', ')', '\x3', '\x2', '\x2', '\x2', 
		'-', '\x30', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\a', '\x17', '\x2', '\x2', '\x32', '\x33', '\a', '\f', '\x2', '\x2', 
		'\x33', '\x34', '\x5', '\b', '\x5', '\x2', '\x34', '\x35', '\a', '\r', 
		'\x2', '\x2', '\x35', 'l', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', 
		'\a', '\x19', '\x2', '\x2', '\x37', '\x38', '\a', '\x3', '\x2', '\x2', 
		'\x38', 'l', '\x5', '\b', '\x5', '\x2', '\x39', ':', '\a', '\x19', '\x2', 
		'\x2', ':', ';', '\a', '\x3', '\x2', '\x2', ';', 'l', '\x5', '\x10', '\t', 
		'\x2', '<', '=', '\a', '\x19', '\x2', '\x2', '=', '>', '\a', '\x4', '\x2', 
		'\x2', '>', '?', '\a', '\v', '\x2', '\x2', '?', '@', '\a', '\x1A', '\x2', 
		'\x2', '@', 'l', '\a', '\x5', '\x2', '\x2', '\x41', '\x42', '\a', '\x19', 
		'\x2', '\x2', '\x42', '\x43', '\a', '\x4', '\x2', '\x2', '\x43', '\x44', 
		'\a', '\x1A', '\x2', '\x2', '\x44', '\x45', '\a', '\x5', '\x2', '\x2', 
		'\x45', '\x46', '\a', '\x3', '\x2', '\x2', '\x46', 'l', '\x5', '\b', '\x5', 
		'\x2', 'G', 'H', '\a', '\x19', '\x2', '\x2', 'H', 'I', '\a', '\x4', '\x2', 
		'\x2', 'I', 'J', '\a', '\x1A', '\x2', '\x2', 'J', 'K', '\a', '\x5', '\x2', 
		'\x2', 'K', 'L', '\a', '\x3', '\x2', '\x2', 'L', 'l', '\x5', '\x10', '\t', 
		'\x2', 'M', 'N', '\a', '\x19', '\x2', '\x2', 'N', 'O', '\a', '\x3', '\x2', 
		'\x2', 'O', 'P', '\a', '\x4', '\x2', '\x2', 'P', 'Q', '\x5', '\f', '\a', 
		'\x2', 'Q', 'R', '\a', '\x5', '\x2', '\x2', 'R', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\a', '\x16', '\x2', '\x2', 'T', 'U', '\a', '\f', '\x2', 
		'\x2', 'U', 'V', '\x5', '\b', '\x5', '\x2', 'V', 'W', '\a', '\r', '\x2', 
		'\x2', 'W', 'l', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x15', '\x2', 
		'\x2', 'Y', 'Z', '\a', '\f', '\x2', '\x2', 'Z', '[', '\x5', '\b', '\x5', 
		'\x2', '[', '\\', '\a', '\r', '\x2', '\x2', '\\', 'l', '\x3', '\x2', '\x2', 
		'\x2', ']', '^', '\a', '\x19', '\x2', '\x2', '^', 'l', '\a', '\x6', '\x2', 
		'\x2', '_', '`', '\a', '\x13', '\x2', '\x2', '`', '\x61', '\x5', '\x18', 
		'\r', '\x2', '\x61', '\x62', '\a', '\a', '\x2', '\x2', '\x62', '\x63', 
		'\x5', '\x1A', '\xE', '\x2', '\x63', '\x64', '\a', '\b', '\x2', '\x2', 
		'\x64', 'l', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\x12', 
		'\x2', '\x2', '\x66', 'g', '\x5', '\x1C', '\xF', '\x2', 'g', 'h', '\a', 
		'\a', '\x2', '\x2', 'h', 'i', '\x5', '\x4', '\x3', '\x2', 'i', 'j', '\a', 
		'\b', '\x2', '\x2', 'j', 'l', '\x3', '\x2', '\x2', '\x2', 'k', '\x31', 
		'\x3', '\x2', '\x2', '\x2', 'k', '\x36', '\x3', '\x2', '\x2', '\x2', 'k', 
		'\x39', '\x3', '\x2', '\x2', '\x2', 'k', '<', '\x3', '\x2', '\x2', '\x2', 
		'k', '\x41', '\x3', '\x2', '\x2', '\x2', 'k', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'M', '\x3', '\x2', '\x2', '\x2', 'k', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'X', '\x3', '\x2', '\x2', '\x2', 'k', ']', '\x3', '\x2', '\x2', 
		'\x2', 'k', '_', '\x3', '\x2', '\x2', '\x2', 'k', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\a', '\x3', '\x2', '\x2', '\x2', 'm', 's', '\a', '\x19', 
		'\x2', '\x2', 'n', 's', '\a', '\x18', '\x2', '\x2', 'o', 's', '\a', '\x1A', 
		'\x2', '\x2', 'p', 's', '\a', '\x1B', '\x2', '\x2', 'q', 's', '\x5', '\n', 
		'\x6', '\x2', 'r', 'm', '\x3', '\x2', '\x2', '\x2', 'r', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 's', '\t', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\a', '\x19', '\x2', '\x2', 'u', 'v', '\a', 
		'\x4', '\x2', '\x2', 'v', 'w', '\a', '\x1A', '\x2', '\x2', 'w', 'x', '\a', 
		'\x5', '\x2', '\x2', 'x', '\v', '\x3', '\x2', '\x2', '\x2', 'y', '~', 
		'\x5', '\xE', '\b', '\x2', 'z', '{', '\a', '\t', '\x2', '\x2', '{', '}', 
		'\x5', '\xE', '\b', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\t', 
		'\x2', '\x2', '\x2', '\x82', '\xF', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x88', '\x5', '\x12', '\n', '\x2', '\x84', '\x85', '\t', '\x3', '\x2', 
		'\x2', '\x85', '\x87', '\x5', '\x12', '\n', '\x2', '\x86', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x11', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x90', '\x5', '\x14', '\v', '\x2', '\x8C', 
		'\x8D', '\t', '\x4', '\x2', '\x2', '\x8D', '\x8F', '\x5', '\x14', '\v', 
		'\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', 
		'\f', '\x2', '\x2', '\x94', '\x95', '\x5', '\x10', '\t', '\x2', '\x95', 
		'\x96', '\a', '\r', '\x2', '\x2', '\x96', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x9F', '\a', '\x1A', '\x2', '\x2', '\x98', '\x9F', '\a', 
		'\x1B', '\x2', '\x2', '\x99', '\x9F', '\a', '\x19', '\x2', '\x2', '\x9A', 
		'\x9B', '\a', '\x19', '\x2', '\x2', '\x9B', '\x9C', '\a', '\x4', '\x2', 
		'\x2', '\x9C', '\x9D', '\a', '\x1A', '\x2', '\x2', '\x9D', '\x9F', '\a', 
		'\x5', '\x2', '\x2', '\x9E', '\x93', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '\x14', '\x2', '\x2', '\xA1', '\xA2', '\a', '\x19', '\x2', 
		'\x2', '\xA2', '\xA3', '\a', '\x6', '\x2', '\x2', '\xA3', '\xA4', '\a', 
		'\a', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\x4', '\x3', '\x2', '\xA5', 
		'\xA6', '\a', '\b', '\x2', '\x2', '\xA6', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\a', '\x19', '\x2', '\x2', '\xA8', '\xA9', '\a', 
		'\n', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x1A', '\x2', '\x2', '\xAA', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\x4', '\x3', 
		'\x2', '\xAC', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', 
		'\x19', '\x2', '\x2', '\xAE', '\x1D', '\x3', '\x2', '\x2', '\x2', '\f', 
		' ', '%', ')', '.', 'k', 'r', '~', '\x88', '\x90', '\x9E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
